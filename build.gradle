import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'org.jetbrains.dokka' version '0.10.0'
}

ext {
    lwjglVersion = "3.2.3"
}

group 'com.nicholaspjohnson'
version '0.1.0-rc2.1'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            def osArch = System.getProperty("os.arch")
            project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                    ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                    : "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            project.ext.lwjglNatives = "natives-macos"
            break
        case OperatingSystem.WINDOWS:
            project.ext.lwjglNatives = System.getProperty("os.arch").contains("64") ? "natives-windows" : "natives-windows-x86"
            break
    }

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-lmdb"
    implementation "org.lwjgl:lwjgl-jemalloc"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeClasspath "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-lmdb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-jemalloc::$lwjglNatives"

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"

    configuration {
        includeNonPublic = false
        skipDeprecated = false
        reportUndocumented = true
        skipEmptyPackages = true
        targets = ["JVM"]
        platform = "JVM"

        sourceLink {
            path = "src/main/kotlin"
            url = "https://github.com/Sylvyrfysh/kotlin-lmdb-wrapper/blob/master/src/main/kotlin"
            lineSuffix = "#L"
        }

        perPackageOption {
            prefix = "com.nicholaspjohnson.kotlinlmdbwrapper.rwps" // will match kotlin and all sub-packages of it
            // All options are optional, default values are below:
            includeNonPublic = true
        }

        jdkVersion = 8
        noStdlibLink = false
        noJdkLink = false
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

test {
    useJUnitPlatform()
}